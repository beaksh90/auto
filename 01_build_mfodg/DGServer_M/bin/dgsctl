#!/bin/sh
#
# Utility to manage MaxGauge processes.
# Written by EXEM Co., Ltd.
# Last modified Nov 2016.
#

ECHO_OPTION_CHECK=`echo -e`

if [ "${ECHO_OPTION_CHECK}" != "-e" ]; then
        echo "CHANGING ECHO OPTION START ======================= ";
        sed -n '1,7p;20,$p' $0 | awk '{gsub(/echo/,"echo -e"); print}' > mxctl_bash.sh;
        echo -e "sleep 1\nmv mxctl_bash.sh $0\nrm -rf mxctlsaver.sh" >> mxctlsaver.sh;
        echo -e "chmod 775 $0" >> mxctlsaver.sh;
        echo "echo CHANGING ECHO OPTION FINISH ======================" >> mxctlsaver.sh;
        echo "sh $0" >> mxctlsaver.sh;
        sh mxctlsaver.sh;
        exit;
fi;

# Check the environments MXG_HOME and PATH.
if [ "$MXG_HOME" = "" ];
then
   echo "\033[31mERROR :: MXG_HOME variable is not defined.\033[0m"
   exit 1;
fi;
if [ "$OS_TYPE" = "" ];
then
   echo "\033[31mERROR :: OS_TYPE variable is not defined.\033[0m"
   exit 1;
fi;

# MaxGauge Datagateher Process.
# Start MaxGauge Datagather and OBSD process.

COMP_PART="MFODG"
TAG_VALUE="will_support_as_of_2016.11"

START_MXG_PROC ()
{
	PID=`ps -ef |grep ${DG_NAME} | grep DGServer.jar | grep -v grep | awk '{print $2}'`;
	OBSD=`ps -ef | grep ${DG_NAME} | grep mxg_obsd | grep -v grep | awk '{print $2}'`;
	PREV_PATH=`pwd`
	
	if [ "$PID" != "" ];
		then echo "\033[31m WARNING :: DataGather for ${DG_NAME} already exists.\033[0m"
	else
		cd ${MXG_HOME}/bin
		nohup java -Xms${DG_XMS}m -Xmx${DG_XMX}m -${DG_NAME} -jar DGServer.jar 1>/dev/null 2>&1 &	
		echo "\033[33m < DataGather for ${DG_NAME} Start >\033[0m"
		cd ${PREV_PATH}
	fi;
	echo
	if [ "$OBSD" != "" ];
		then echo "\033[31m WARNING :: DataGather Observer for ${DG_NAME} already exists.\033[0m"
	else
		cd ${MXG_HOME}/bin
		mxg_obsd/${OS_TYPE}/mxg_obsd -c ${DG_NAME} -f ${MXG_HOME}/conf/DG/common_linux.conf -OTHERD -i 10 -D
		echo "\033[33m < DataGather Observer for ${DG_NAME} Start >\033[0m"
		cd ${PREV_PATH}
	fi;
	echo	
	sleep 2
	STATUS_MXG_PROC
}
# Start MaxGauge Datagather debug mode.
START_MXG_PROC_DEBUG ()
{
	PID=`ps -ef |grep ${DG_NAME} | grep DGServer.jar | grep -v grep | awk '{print $2}'`;
	if [ "$PID" != "" ];
		then echo "\033[31m WARNING :: DataGather for ${DG_NAME} already exists.\033[0m"
	else
		PREV_PATH=`pwd`
		cd ${MXG_HOME}/bin
		java -Xms${DG_XMS}m -Xmx${DG_XMX}m -${DG_NAME} -jar DGServer.jar
		cd ${PREV_PATH}
	fi;
}

# Stop MaxGauge Datagather and OBSD process.
STOP_MXG_PROC ()
{
	PID=`ps -ef | grep ${DG_NAME} | grep DGServer.jar | grep -v grep | awk '{print $2}'`;
	OBSD=`ps -ef | grep ${DG_NAME} | grep mxg_obsd | grep -v grep | awk '{print $2}'`;

	if [ "$PID" = "" ];
		then echo "\033[31m WARNING:: DataGather for ${DG_NAME} does not exist.\033[0m"
	else
	    kill ${PID};
		if [ $? = 0 ];
		then echo "\033[33m <DataGather for ${DG_NAME} Stop>\033[0m"
		else echo "\033[31m WARNING :: DataGather for ${DG_NAME} is not shutdown.\033[0m"
		fi;
	fi;
	echo
	if [ "$OBSD" = "" ];
		then echo "\033[31m WARNING:: DataGather Observer for ${DB_NAME} does not exist.\033[0m"
	else
		kill ${OBSD};
		if [ $? = 0 ];
		then echo "\033[33m <DataGather Observer for ${DG_NAME} Stop>\033[0m"
		else echo "\033[31m WARNING :: DataGather Observer for  ${DG_NAME} is not shutdown.\033[0m"
		fi;
	fi;
	echo
	sleep 2
	STATUS_MXG_PROC
}

# Print status of Datagather and OBSD process.
STATUS_MXG_PROC ()
{
	PID=`ps -ef | grep ${DG_NAME} | grep DGServer.jar | grep -v grep | awk '{print $2}'`;
	OBSD=`ps -ef | grep ${DG_NAME} | grep mxg_obsd | grep -v grep | awk '{print $2}'`;
	
if [ "${PID}" = "" ]; then
	STATUS="X"
	PID="-"
else
	STATUS="O"
fi;

if [ "${OBSD}" = "" ]; then
	OBSD_STATUS="X"
	OBSD="-"
else
	OBSD_STATUS="O"
fi;

PORT=`cat ${MXG_HOME}/conf/DGServer.xml | grep gather_port | sed 's/gather_port/*/g' | tr -d '</* >'`

REPO_TYPE=`cat ${MXG_HOME}/conf/DGServer.xml | grep database_type | sed 's/database_type/*/g' | tr -d '</* >'`

REPO_IP=`cat ${MXG_HOME}/conf/DGServer.xml | grep database_ip | sed 's/database_ip/*/g' | tr -d '</* >'`

REPO_PORT=`cat ${MXG_HOME}/conf/DGServer.xml | grep database_port | sed 's/database_port/*/g' | tr -d '</* >'`

REPO_SID=`cat ${MXG_HOME}/conf/DGServer.xml | grep database_sid | sed 's/database_sid/*/g' | tr -d '</* >'`

echo "\t\t\t\033[33m < DATAGATHER STATUS CHECK > \033[36m"
echo "      COMP PART      STATUS  PID  SERVICE_PORT   REPO_INFO\033[0m"

echo " [1] DGServer.jar     [${STATUS}]  [ ${PID} ] [ ${PORT} ]    [ ${REPO_IP}:${REPO_PORT}:${REPO_SID}(${REPO_TYPE}) ]"
echo " [2] OBSD             [${OBSD_STATUS}]  [ ${OBSD} ] [ - ]    [ - ]"

DATE=`date +%y%m%d`
                LOG_FILE="$MXG_HOME/log/maxgauge/obsd$DATE.log"
                OBSD_LOG_LASTROW=`tail -3 $LOG_FILE 2> /dev/null | grep "\]\[" `
                BARRIER1="------------------------------------------------------------------------------"
                BARRIER2="------------------------------------------------------------------------------"
        if [ "$OBSD_LOG_LASTROW" = "" ]; then
			OBSD_LOG_LASTROW="No issue today or not yet written"
		fi;
        
		echo  "\033[36m Observer Log\033[m \n$BARRIER1\n$OBSD_LOG_LASTROW\n$BARRIER2 "
        

echo " * \033[36mJAVA HEAP MEMORY INFO\033[0m [ INITIAL(XMS)= ${DG_XMS} MB ] [ MAX(XMX)= ${DG_XMX} MB ]\033[0m"
echo " * OS memory usage can be greater than XMX option value because None Heap Mem + Heap Mem = OS Memory Usage."	
}

# Check version of Datagather
VERSION_MXG_PROC ()
{
	echo "\033[36mTAG_VALUE : ${TAG_VALUE}\033[0m"
	java -jar ${MXG_HOME}/bin/DGServer.jar -v;
}

# Start Datagather install process
INSTALL_MXG_PROC ()
{
	PREV_PATH=`pwd`
	cd ${MXG_HOME}/bin
	java -jar DGServer.jar install;
	cd ${PREV_PATH}
}


# MaxGauge Datagather Help Message.

PRINT_ERROR="Invalid parameter."

PRINT_HELP ()
{
echo " ==========================================================================="
echo " [1] start          : to start Maxgauge DataGather."
echo " [2] stop           : to stop Maxgauge DataGather."
echo " [3] stat(us)       : to check the status of Maxgauge DataGather."
echo " [4] restart        : to restart Maxgauge DataGather."
echo " [5] install        : to run install mode DataGather."
echo " [6] ver(sion)      : to check the version of Maxgauge DataGather."
echo " [7] debug          : to debug Maxgauge DataGather."
echo " [8] quit|q|exit|e  : to exit dgsctl program. (interactive mode only)"
echo " ==========================================================================="
}

# if non-interactive mode

if [ $# -gt 0 ];
then 
   cmd=$1;
   unnecessary=$2;
   
   case "$cmd" in
        start|1) 
               if [ "$unnecessary" != "" ];
               then echo ${PRINT_ERROR};
               exit 1
               fi;
               START_MXG_PROC
        ;;
        stop|2) 
               if [ "$unnecessary" != "" ];
               then echo ${PRINT_ERROR};
               exit 1
               fi;
               STOP_MXG_PROC
        ;;
        status|stat|3) 
               if [ "$unnecessary" != "" ];
               then echo ${PRINT_ERROR};
               exit 1
               fi;
               STATUS_MXG_PROC
        ;;
        version|ver|6) 
			   VERSION_MXG_PROC
               exit 0
        ;;
	install|5) 
			   INSTALL_MXG_PROC
               exit 0
        ;;
	debug|7)
		START_MXG_PROC_DEBUG
		exit 0
	;;
	restart|4)
		STOP_MXG_PROC
		START_MXG_PROC
	;;
        *)
			   echo "\033[31m${cmd} is invalid command.\033[0m"
			   PRINT_HELP
               exit 1;
        ;;
   esac
   exit 0;
fi;

# interactive mode

echo "\t\t\t\033[33m < MFO DataGather Environment Info > \033[36m"
echo " COMP_PART	TAG_VALUE\033[0m"

printf " [%d] %s	[ %s ]\n" 1 "${COMP_PART}" "${TAG_VALUE}"

echo
echo " Welcome to DGSCTL!"
echo " MaxGauge home directory is ${MXG_HOME}"
echo

PRINT_HELP

while true
do
   printf "%s " " DGSCTL>"
   read cmd unnecessary;
   case "$cmd" in 
        quit|exit|q|e|8) 
                break 
        ;;
        start|1) 
               if [ "$unnecessary" != "" ];
               then echo ${PRINT_ERROR};
                    continue;
               fi;
               START_MXG_PROC
               continue 
        ;;
        stop|2) 
               if [ "$unnecessary" != "" ];
               then echo ${PRINT_ERROR};
                    continue;
               fi;
               STOP_MXG_PROC
               continue
        ;;
        status|stat|3) 
               if [ "$unnecessary" != "" ];
               then echo ${PRINT_ERROR};
                    continue;
               fi;
               STATUS_MXG_PROC
               continue
        ;;
	restart|4)
		STOP_MXG_PROC
		START_MXG_PROC
	continue
	;;
        version|ver|6) 
			   VERSION_MXG_PROC
               continue
        ;;
	install|5) 
			   INSTALL_MXG_PROC
               continue
        ;;
	debug|7)
		START_MXG_PROC_DEBUG
		continue
	;;
        *)
               if [ "$cmd" = "" ];
               then continue;
               fi;
			   echo "\033[31m${cmd} is invalid command.\033[0m"
			   PRINT_HELP
               continue 
        ;;
   esac
done


